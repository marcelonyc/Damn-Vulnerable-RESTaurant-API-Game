name: dvr-game-build
on: workflow_dispatch
    
permissions:
  actions: read # for detecting the Github Actions environment.
  id-token: write # for creating OIDC tokens for signing.
  packages: write # for uploading attestations.
  contents: read
jobs:
    build-publish-python:
        name: dvr-game-build
        runs-on: self-hosted-linux
        env:
          OIDC_PROVIDER_NAME: ${{ vars.OIDC_PROVIDER_NAME }}
          DOCKER_REPO: 'dvr-game-docker-local'
          DOCKER_REMOTE: 'dvr-game-docker-remote'
          PYTHON_REMOTE_REPO: 'dvr-game-python-remote'
          IMAGE_NAME: 'dvr-game-python'
          JF_URL: https://${{ vars.JF_URL }}/
          # JFROG_CLI_BUILD_PROJECT JF_PROJECT: ${{ vars.JF_PROJECT }}
          JF_BUILD_NAME: 'dvr-game-build'
          JF_BUILD_NUMBER: ${{ github.run_number }}

        steps:
            # Use the specific setup-cli branch
            - name: Setup JFrog CLI
              uses: jfrog/setup-jfrog-cli@v4
              id: setup-cli
              env:
                JF_URL: https://${{ vars.JF_URL }}/
                JF_PROJECT: ${{ vars.JF_PROJECT }}
              with:
                  oidc-provider-name: ${{ env.OIDC_PROVIDER_NAME }}
 
            - name: configure jfrog environment
              run: |
                # Use a curated repository for python dependencies resolution
                # GLOBAL will force the docker build to use the jfrog repo
                jf pipc --repo-resolve=${{ env.PYTHON_REMOTE_REPO }} --global=true

            - name: Checkout
              uses: actions/checkout@v4
    
            - name: Set up Python 3.8
              uses: actions/setup-python@v2
              with:
                python-version: 3.8
    
            - name: Install Poetry
              run: |
                jf pip install poetry
                
            - name: Install python modules
              run: |
                jf poetry install
    
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Authenticate Docker
              uses: docker/login-action@v3
              with:
                registry: ${{ vars.JF_URL }}
                username: ${{ steps.setup-cli.outputs.oidc-user }}
                password: ${{ steps.setup-cli.outputs.oidc-token }}              
            
            - name: Build Docker image
              uses: docker/build-push-action@v5
              id: build
              with:
                push: true
                context: .
                platforms: linux/amd64, linux/arm64
                tags: ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}
                provenance: false

            # - name: docker scan
            #   run: |  
            #      jf docker pull ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}
            #      jf docker scan ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}                   


            - name: Publish build info
              run: |
                jf rt build-add-dependencies .           
                jf rt build-add-dependencies --from-rt ${{ env.DOCKER_REMOTE }}/
                jf rt build-add-dependencies --from-rt ${{ env.DOCKER_REPO }}/
                jf rt build-add-dependencies --from-rt ${{ env.PYTHON_REMOTE_REPO }}/
                jf rt build-add-git
                jf rt build-publish