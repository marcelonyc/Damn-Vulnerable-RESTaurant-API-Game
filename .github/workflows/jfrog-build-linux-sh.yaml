name: dvr-game-build
on: workflow_dispatch
    
permissions:
  actions: read # for detecting the Github Actions environment.
  id-token: write # for creating OIDC tokens for signing.
  packages: write # for uploading attestations.
  contents: read

env:
  OIDC_PROVIDER_NAME: ${{ vars.OIDC_PROVIDER_NAME }}
  DOCKER_REPO: ${{ vars.DOCKER_REPO }}
  DOCKER_REMOTE: ${{ vars.DOCKER_REMOTE }}
  PYTHON_REMOTE_REPO: ${{ vars.PYTHON_REMOTE_REPO }}
  DEBIAN_REMOTE_REPO: ${{ vars.DEBIAN_REMOTE_REPO }}
  IMAGE_NAME: '${{ vars.IMAGE_NAME }}:${{ github.run_number }}'
  JF_URL: https://${{ vars.JF_URL }}/
  JF_BUILD_NAME: 'dvr-game-build'
  JF_BUILD_NUMBER: ${{ github.run_number }}  

jobs:

    python-curation-check:
        # This job will fail if Curation policies are violated
        name: curation-check
        runs-on: self-hosted-linux
        steps:
            # Use the specific setup-cli branch
            - name: Setup JFrog CLI
              uses: jfrog/setup-jfrog-cli@v4
              id: setup-cli
              env:
                JF_URL: https://${{ vars.JF_URL }}/
                JF_PROJECT: ${{ vars.JF_PROJECT }}
              with:
                  oidc-provider-name: ${{ env.OIDC_PROVIDER_NAME }}
 
            - name: configure jfrog environment
              run: |
                # Use a curated repository for python dependencies resolution
                # GLOBAL will force the docker build to use the jfrog repo
                jf poetry-config --repo-resolve=${{ env.PYTHON_REMOTE_REPO }} --global=true

            - name: Checkout
              uses: actions/checkout@v4
    
            - name: Set up Python 3.8
              uses: actions/setup-python@v2
              with:
                python-version: 3.8
 
            - name: Install Poetry
              run: |
                jf pip install poetry
                
            - name: Install python modules
              run: |
                jf poetry install

    
    build-publish-python:
        name: dvr-game-build
        runs-on: self-hosted-linux
        needs: [ python-curation-check ]
        steps:
            # Use the specific setup-cli branch
            - name: Setup JFrog CLI
              uses: jfrog/setup-jfrog-cli@v4
              id: setup-cli
              env:
                JF_URL: https://${{ vars.JF_URL }}/
                JF_PROJECT: ${{ vars.JF_PROJECT }}
              with:
                  oidc-provider-name: ${{ env.OIDC_PROVIDER_NAME }}
 
            - name: Checkout
              uses: actions/checkout@v4
       
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Authenticate Docker
              uses: docker/login-action@v3
              with:
                registry: ${{ vars.JF_URL }}
                username: ${{ steps.setup-cli.outputs.oidc-user }}
                password: ${{ steps.setup-cli.outputs.oidc-token }}              
            
            - name: Build Docker image
              uses: docker/build-push-action@v5
              id: build
              with:
                build-args: |
                  JF_URL=${{ vars.JF_URL }}
                  JF_PROJECT=${{ vars.JF_PROJECT }}
                  JF_USER=${{ steps.setup-cli.outputs.oidc-user }}
                  JF_PASSWORD=${{ steps.setup-cli.outputs.oidc-token }}
                  PYTHON_REMOTE_REPO=${{ env.PYTHON_REMOTE_REPO }}
                  DOCKER_REPO=${{ env.DOCKER_REPO }}
                  DOCKER_REMOTE=${{ env.DOCKER_REMOTE }}
                  DEBIAN_REMOTE_REPO: ${{ vars.DEBIAN_REMOTE_REPO }}
                push: true
                context: .
                platforms: linux/amd64, linux/arm64       
                tags: ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}
                provenance: false

            - name: docker scan
              run: |  
                 jf docker pull ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}
                 jf docker scan ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}                   


            - name: Publish build info
              run: |
                jf rt build-add-dependencies .           
                echo "DOCKER_REMOTE: ${{ env.DOCKER_REMOTE }}"
                jf rt build-add-dependencies --from-rt ${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }} 
                jf rt build-add-git
                jf rt build-publish

            - name: Build Scan
              run: |
                jf rt build-scan