name: dvr-game-build
on: workflow_dispatch
    
permissions:
  actions: read # for detecting the Github Actions environment.
  id-token: write # for creating OIDC tokens for signing.
  packages: write # for uploading attestations.
  contents: read

env:
  OIDC_PROVIDER_NAME: ${{ vars.OIDC_PROVIDER_NAME }}
  DOCKER_REPO: ${{ vars.DOCKER_REPO }}
  DOCKER_REMOTE: ${{ vars.DOCKER_REMOTE }}
  PYTHON_REMOTE_REPO: ${{ vars.PYTHON_REMOTE_REPO }}
  DEBIAN_REMOTE_REPO: ${{ vars.DEBIAN_REMOTE_REPO }}
  IMAGE_NAME: '${{ vars.IMAGE_NAME }}:${{ github.run_number }}'
  JF_URL: https://${{ vars.JF_URL }}/
  JF_BUILD_NAME: 'dvr-game-build'
  JF_BUILD_NUMBER: ${{ github.run_number }}
  JF_PROJECT: ${{ vars.JF_PROJECT }}

jobs:

    python-curation-check:
        # This job will fail if Curation policies are violated
        name: curation-check
        runs-on: dvr-self-hosted
        steps:
            # Use the specific setup-cli branch
            - name: Setup JFrog CLI
              uses: jfrog/setup-jfrog-cli@v4
              id: setup-cli
              env:
                JF_URL: https://${{ vars.JF_URL }}/
                JF_PROJECT: ${{ vars.JF_PROJECT }}
              with:
                  oidc-provider-name: ${{ env.OIDC_PROVIDER_NAME }}
                  custom-server-id: mdlone
                  
                  
 
            - name: configure jfrog environment
              run: |
                # Use a curated repository for python dependencies resolution
                # GLOBAL will force the docker build to use the jfrog repo
                jf pipc --repo-resolve=${{ env.PYTHON_REMOTE_REPO }} --global=true

            - name: Checkout
              uses: actions/checkout@v4
    
            # - name: Set up Python 3.10.14
            #   uses: actions/setup-python@v5.3.0
            #   with:
            #     python-version: 3.10.14
 
            - name: Install python modules
              run: |
                jf pip install -r requirements.txt

    
    build-publish-python:
        name: dvr-game-build
        runs-on: dvr-self-hosted
        needs: [ python-curation-check ]
        steps:
            # Use the specific setup-cli branch
            - name: Setup JFrog CLI
              uses: jfrog/setup-jfrog-cli@v4
              id: setup-cli
              env:
                JF_URL: https://${{ vars.JF_URL }}/
                JF_PROJECT: ${{ vars.JF_PROJECT }}
              with:
                  oidc-provider-name: ${{ env.OIDC_PROVIDER_NAME }}
 
            - name: Checkout
              uses: actions/checkout@v4
       
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Authenticate Docker
              uses: docker/login-action@v3
              with:
                registry: ${{ vars.JF_URL }}
                username: ${{ steps.setup-cli.outputs.oidc-user }}
                password: ${{ steps.setup-cli.outputs.oidc-token }}              
            
            - name: Build Docker image
              uses: docker/build-push-action@v5
              id: build
              with:
                build-args: |
                  JF_URL=${{ vars.JF_URL }}
                  JF_PROJECT=${{ vars.JF_PROJECT }}
                  JF_USER=${{ steps.setup-cli.outputs.oidc-user }}
                  JF_PASSWORD=${{ steps.setup-cli.outputs.oidc-token }}
                  PYTHON_REMOTE_REPO=${{ env.PYTHON_REMOTE_REPO }}
                  DOCKER_REPO=${{ env.DOCKER_REPO }}
                  DOCKER_REMOTE=${{ env.DOCKER_REMOTE }}
                  DEBIAN_REMOTE_REPO: ${{ vars.DEBIAN_REMOTE_REPO }}
                push: false
                context: .
                outputs: type=docker
                # platforms: linux/amd64, linux/arm64       
                # tags: ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}
                provenance: false

            - name: CLI default JPD
              run: |
                 jf config show
                 
            - name: docker push
              run: |  
                 jf docker tag ${{ steps.build.outputs.imageid }} ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}
                 jf docker push ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}
                 # jf docker scan ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}                   


            - name: Publish build info
              run: |
                # jf rt build-add-dependencies .           
                echo "DOCKER_REMOTE: ${{ env.DOCKER_REMOTE }}"
                # jf rt build-add-dependencies --from-rt "${{ env.DOCKER_REPO }}/${{ vars.IMAGE_NAME }}/${{ github.run_number }}/"
                jf rt build-add-git
                jf rt build-publish

            # - name: Build Scan
            #   run: |
            #     jf build-scan
    
    # deply-to-dev-env:
    #     name: dvr-game-release-bundle
    #     runs-on: dvr-self-hosted
    #     needs: [ build-publish-python ]
    #     steps:
    #         # Use the specific setup-cli branch
    #         - name: Setup JFrog CLI
    #           uses: jfrog/setup-jfrog-cli@v4
    #           id: setup-cli
    #           env:
    #             JF_URL: https://${{ vars.JF_URL }}/
    #             JF_PROJECT: ${{ vars.JF_PROJECT }}
    #           with:
    #               oidc-provider-name: ${{ env.OIDC_PROVIDER_NAME }}

            # - name: "Create Release Bundle"
            #   run: |
            #     curl --location https://${{ vars.JF_URL }}/lifecycle/api/v2/release_bundle?project=${{ vars.JF_PROJECT }} \
            #     -X POST \
            #     --header "X-JFrog-Signing-Key-Name: ${{ vars.SIGNATURE_KEY_NAME }}" \
            #     --header "Authorization: Bearer ${{ steps.setup-cli.outputs.oidc-token }}" \
            #     --header "Content-Type: application/json" \
            #     --data '{
            #         "release_bundle_name": "DVR-Release-Bundle",
            #         "release_bundle_version": "${{ github.run_number }}",
            #         "skip_docker_manifest_resolution": false,
            #         "source_type": "builds",
            #         "source": {
            #             "builds": [
            #                 {
            #                     "build_repository": "${{ vars.JF_PROJECT }}-build-info",
            #                     "build_name": "${{env.JF_BUILD_NAME}}",
            #                     "build_number": "${{ env.JF_BUILD_NUMBER }}",
            #                     "include_dependencies": false
            #                 }
            #             ]
            #         }
            #     }'

